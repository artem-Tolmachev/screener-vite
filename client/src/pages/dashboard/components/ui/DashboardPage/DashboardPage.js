import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from "@/components/ui/resizable";
import React, { Suspense } from "react";
import ChartSkeleton from "@/shared/components/Skeleton/ChartSkeleton";
import DashboardSkeleton from "@/shared/components/Skeleton/DashBoardSkeleton";
import DashboardSettingsPanel from "../DashboardSettingsPanel/DashboardSettingsPanel";
import { useControlerSettingsButtons } from "@/pages/dashboard/hooks/useControlerSettingsButtons";
import { setActivePanelIndex } from "@/pages/dashboard/coinData/slices/CoinsSlice";
import { useAppDispatch } from "@/app/store/store";
const ChartLazy = React.lazy(() => import("@/pages/dashboard/components/widgets/Chart/Chart"));
const DashboardQuotesSidebarLazy = React.lazy(() => import("@/pages/dashboard/components/widgets/DashboardQuotesSidebar/DashboardQuotesSidebar"));
function DashboardPage() {
    const controler = useControlerSettingsButtons();
    const dispatch = useAppDispatch();
    if (!controler || !controler.layout) {
        return _jsx("div", { children: "Loading..." }); // Или другой индикатор загрузки
    }
    if (!controler)
        return;
    const { screensDataArray, screenId, isActiveList, togglePanel, toggle, screens, direction, layout, greed, screenIndex } = controler;
    const { rows, col, side } = layout || {};
    if (!screensDataArray || !isActiveList) {
        return _jsx("div", { children: "Loading data..." });
    }
    return (_jsx(_Fragment, { children: rows ? (_jsx(ResizablePanelGroup, { direction: direction, className: "pl-1 pb-1 min-h-0 flex-1", children: _jsx(ResizablePanel, { children: _jsx(ResizablePanelGroup, { direction: direction, className: "pt-0", children: Array.from({ length: screens }).map((_, outerIndex) => {
                        const panelIndex = outerIndex;
                        return (_jsxs(React.Fragment, { children: [_jsx(ResizablePanel, { id: `outer-main-panel-${outerIndex}`, order: outerIndex, onMouseEnter: () => toggle(panelIndex, screenId), children: _jsxs(ResizablePanelGroup, { direction: "horizontal", className: "pt-0", onClick: () => dispatch(setActivePanelIndex(panelIndex)), children: [_jsx(ResizablePanel, { id: `outer-chart4-${outerIndex}`, order: outerIndex * 10 + 1, defaultSize: isActiveList[panelIndex] ? 50 : 100, className: 'p-0', children: _jsx(Suspense, { fallback: _jsx(ChartSkeleton, {}), children: _jsx(ChartLazy, { panelIndex: panelIndex }) }) }, `outer-chart4-${outerIndex}`), isActiveList[panelIndex] && (_jsxs(_Fragment, { children: [_jsx(ResizableHandle, { className: `data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1 ${screenIndex === panelIndex ? "border-2 border-blue-700" : "border-transparent border-2"}` }), _jsx(ResizablePanel, { id: `outer-dashboard-${outerIndex}`, order: outerIndex * 10 + 2, children: _jsx(Suspense, { fallback: _jsx(DashboardSkeleton, {}), children: _jsx(DashboardQuotesSidebarLazy, { isActive: isActiveList[panelIndex], panelIndex: panelIndex, screensDataArray: screensDataArray }) }) }, `outer-dashboard-${outerIndex}`)] })), _jsx(DashboardSettingsPanel, { onCLick: () => togglePanel(panelIndex), isActive: isActiveList[panelIndex] })] }, `outer-main-panel-groop-${outerIndex}`) }, `outer-main-panel-${outerIndex}`), (rows && screens > 1 && screens - 1 > outerIndex) && _jsx(ResizableHandle, { className: "data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1" })] }, `outer-fragment-${outerIndex}`));
                    }) }) }) })) : col && side === "left" ? (_jsxs(ResizablePanelGroup, { direction: "horizontal", className: "pl-1 pb-1", children: [_jsx(ResizablePanel, { children: _jsx(ResizablePanelGroup, { direction: "vertical", className: "pt-0", children: Array.from({ length: screens - 1 }).map((_, outerIndex) => {
                            const panelIndex = outerIndex;
                            return (_jsxs(React.Fragment, { children: [_jsx(ResizablePanel, { id: `outer-main-panel-left-${outerIndex}`, order: outerIndex * 10 + 3, onMouseEnter: () => toggle(panelIndex, screenId), children: _jsxs(ResizablePanelGroup, { direction: "horizontal", className: "pt-0 cursor-pointer", onClick: () => dispatch(setActivePanelIndex(panelIndex)), children: [_jsx(ResizablePanel, { id: `outer-chart2-${outerIndex}`, order: outerIndex * 10 + 4, defaultSize: isActiveList[panelIndex] ? 40 : 100, children: _jsx(Suspense, { fallback: _jsx(ChartSkeleton, {}), children: _jsx(ChartLazy, { panelIndex: panelIndex }) }) }, `outer-chart2-${outerIndex}`), isActiveList[panelIndex] && _jsxs(_Fragment, { children: [_jsx(ResizableHandle, { className: `data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1 ${screenIndex === panelIndex ? "border-2 border-blue-700" : "border-transparent border-2"}` }), _jsx(ResizablePanel, { id: `outer-dashboard-left-${outerIndex}`, order: outerIndex * 10 + 5, children: _jsx(Suspense, { fallback: _jsx(DashboardSkeleton, {}), children: _jsx(DashboardQuotesSidebarLazy
                                                                // selectedCoin={selectedCoin}
                                                                , { 
                                                                    // selectedCoin={selectedCoin}
                                                                    isActive: isActiveList[panelIndex], panelIndex: panelIndex, screensDataArray: screensDataArray }) }) }, `outer-dashboard-${outerIndex}`)] }), _jsx(DashboardSettingsPanel, { onCLick: () => togglePanel(panelIndex), isActive: isActiveList[panelIndex] })] }) }, `outer-main-panel-${outerIndex}`), (col > 1 && outerIndex < col - 1) && _jsx(ResizableHandle, { className: "data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1" })] }, `outer-fragment-left-${outerIndex}`));
                        }) }) }), _jsx(ResizableHandle, { className: `data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1` }), _jsx(ResizablePanel, { onMouseEnter: () => toggle((screens - 1), screenId), children: _jsxs(ResizablePanelGroup, { direction: "horizontal", className: "pt-0 cursor-pointer", onClick: () => dispatch(setActivePanelIndex(screens - 1)), children: [_jsx(ResizablePanel, { children: _jsx(Suspense, { fallback: _jsx(ChartSkeleton, {}), children: _jsx(ChartLazy, { panelIndex: screens - 1 }) }) }), isActiveList[screens - 1] && _jsxs(_Fragment, { children: [_jsx(ResizableHandle, { className: `data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1 ${screenIndex === screens - 1 ? "border-2 border-blue-700" : "border-transparent border-2"}` }), _jsx(ResizablePanel, { children: _jsx(Suspense, { fallback: _jsx(DashboardSkeleton, {}), children: _jsx(DashboardQuotesSidebarLazy, { isActive: isActiveList[screens - 1], 
                                                // selectedCoin={selectedCoin}
                                                screensDataArray: screensDataArray, panelIndex: screens - 1 }) }) })] }), _jsx(DashboardSettingsPanel, { onCLick: () => togglePanel(screens - 1), isActive: isActiveList[screens - 1] })] }) })] })) : col && side === "right" ? (_jsxs(ResizablePanelGroup, { direction: "horizontal", className: "pl-1 pb-1", children: [_jsx(ResizablePanel, { onMouseEnter: () => toggle((screens - 1), screenId), children: _jsxs(ResizablePanelGroup, { direction: "horizontal", className: "pt-0 cursor-pointer", onClick: () => dispatch(setActivePanelIndex(screens - 1)), children: [_jsx(ResizablePanel, { children: _jsx(Suspense, { fallback: _jsx(ChartSkeleton, {}), children: _jsx(ChartLazy, { panelIndex: screens - 1 }) }) }), isActiveList[screens - 1] && _jsxs(_Fragment, { children: [_jsx(ResizableHandle, { className: `data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1 ${screenIndex === screens - 1 ? "border-2 border-blue-700" : "border-transparent border-2"}` }), _jsx(ResizablePanel, { children: _jsx(Suspense, { fallback: _jsx(DashboardSkeleton, {}), children: _jsx(DashboardQuotesSidebarLazy
                                            // selectedCoin={selectedCoin}
                                            , { 
                                                // selectedCoin={selectedCoin}
                                                isActive: isActiveList[screens - 1], panelIndex: screens - 1, screensDataArray: screensDataArray }) }) })] }), _jsx(DashboardSettingsPanel, { onCLick: () => togglePanel(screens - 1), isActive: isActiveList[screens - 1] })] }) }), _jsx(ResizableHandle, { className: "data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1" }), _jsx(ResizablePanel, { children: _jsx(ResizablePanelGroup, { direction: "vertical", className: "pt-0", children: Array.from({ length: screens - 1 }).map((_, outerIndex) => {
                            const panelIndex = outerIndex;
                            return (_jsxs(React.Fragment, { children: [_jsx(ResizablePanel, { id: `outer-main-panel-right-${outerIndex}`, order: outerIndex * 10 + 6, onMouseEnter: () => toggle(panelIndex, screenId), children: _jsxs(ResizablePanelGroup, { direction: "horizontal", className: "pt-0 cursor-pointer", onClick: () => dispatch(setActivePanelIndex(panelIndex)), children: [_jsx(ResizablePanel, { id: `outer-chart1-right-${outerIndex}`, order: outerIndex * 10 + 7, children: _jsx(Suspense, { fallback: _jsx(ChartSkeleton, {}), children: _jsx(ChartLazy, { panelIndex: panelIndex }) }) }, `outer-chart1-${outerIndex}`), isActiveList[panelIndex] && _jsxs(_Fragment, { children: [_jsx(ResizableHandle, { className: `data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1 ${screenIndex === panelIndex ? "border-2 border-blue-700" : "border-transparent border-2"}` }), _jsx(ResizablePanel, { id: `outer-dashboard-right-${outerIndex}`, order: outerIndex * 10 + 8, children: _jsx(Suspense, { fallback: _jsx(DashboardSkeleton, {}), children: _jsx(DashboardQuotesSidebarLazy
                                                                // selectedCoin={selectedCoin}
                                                                , { 
                                                                    // selectedCoin={selectedCoin}
                                                                    isActive: isActiveList[panelIndex], panelIndex: panelIndex, screensDataArray: screensDataArray }) }) }, `outer-dashboard-${outerIndex}`)] }), _jsx(DashboardSettingsPanel, { onCLick: () => togglePanel(panelIndex), isActive: isActiveList[panelIndex] })] }) }, `outer-main-panel-right-${outerIndex}`), (screens > 1 && outerIndex < (screens - 2)) && _jsx(ResizableHandle, { className: "data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1" })] }, `outer-fragment-right${outerIndex}`));
                        }) }) })] })) : col && side === "top" ? (_jsxs(ResizablePanelGroup, { direction: "vertical", className: "pl-1 pb-1", children: [_jsx(ResizablePanel, { children: _jsx(ResizablePanelGroup, { direction: "horizontal", className: "pt-0", children: Array.from({ length: col }).map((_, outerIndex) => {
                            const panelIndex = outerIndex;
                            return (_jsxs(React.Fragment, { children: [_jsx(ResizablePanel, { className: "panel-top", onMouseEnter: () => toggle(panelIndex, screenId), children: _jsxs(ResizablePanelGroup, { direction: "horizontal", className: "pt-0 cursor-pointer", onClick: () => dispatch(setActivePanelIndex(panelIndex)), children: [_jsx(ResizablePanel, { id: `outer-top-${outerIndex}`, order: outerIndex * 10 + 9, children: _jsx(Suspense, { fallback: _jsx(ChartSkeleton, {}), children: _jsx(ChartLazy, { panelIndex: panelIndex }) }) }, `outer-${outerIndex}`), isActiveList[panelIndex] && _jsxs(_Fragment, { children: [_jsx(ResizableHandle, { className: `data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1 ${screenIndex === panelIndex ? "border-2 border-blue-700" : "border-transparent border-2"}` }), _jsx(ResizablePanel, { id: `outer-dashboard-top-${outerIndex}`, order: outerIndex * 10 + 10, children: _jsx(Suspense, { fallback: _jsx(DashboardSkeleton, {}), children: _jsx(DashboardQuotesSidebarLazy
                                                                // selectedCoin={selectedCoin}
                                                                , { 
                                                                    // selectedCoin={selectedCoin}
                                                                    isActive: isActiveList[panelIndex], panelIndex: panelIndex, screensDataArray: screensDataArray }) }) }, `outer-dashboard-${outerIndex}`)] }), _jsx(DashboardSettingsPanel, { onCLick: () => togglePanel(panelIndex), isActive: isActiveList[panelIndex] })] }) }), (col > 1 && outerIndex < col - 1) && (_jsx(ResizableHandle, { className: "data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1" }, `handle-outer-${outerIndex}`))] }, `outer-fragment-top-${outerIndex}`));
                        }) }) }), _jsx(ResizableHandle, { className: "data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1" }), _jsx(ResizablePanel, { onMouseEnter: () => toggle((screens - 1), screenId), children: _jsxs(ResizablePanelGroup, { direction: "horizontal", className: "pt-0 cursor-pointer", onClick: () => dispatch(setActivePanelIndex(screens - 1)), children: [_jsx(ResizablePanel, { children: _jsx(Suspense, { fallback: _jsx(ChartSkeleton, {}), children: _jsx(ChartLazy, { panelIndex: screens - 1 }) }) }), isActiveList[screens - 1] && _jsxs(_Fragment, { children: [_jsx(ResizableHandle, { className: `data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1 ${screenIndex === screens - 1 ? "border-2 border-blue-700" : "border-transparent border-2"}` }), _jsx(ResizablePanel, { children: _jsx(Suspense, { fallback: _jsx(DashboardSkeleton, {}), children: _jsx(DashboardQuotesSidebarLazy
                                            // selectedCoin={selectedCoin}
                                            , { 
                                                // selectedCoin={selectedCoin}
                                                isActive: isActiveList[screens - 1], panelIndex: screens - 1, screensDataArray: screensDataArray }) }) })] }), _jsx(DashboardSettingsPanel, { onCLick: () => togglePanel(screens - 1), isActive: isActiveList[screens - 1] })] }) })] })) : col && side === "bottom" ? (_jsxs(ResizablePanelGroup, { direction: "vertical", className: "pl-1 pb-1", children: [_jsx(ResizablePanel, { onMouseEnter: () => toggle((screens - 1), screenId), children: _jsxs(ResizablePanelGroup, { direction: "horizontal", className: "pt-0 cursor-pointer", onClick: () => dispatch(setActivePanelIndex(screens - 1)), children: [_jsx(ResizablePanel, { children: _jsx(Suspense, { fallback: _jsx(ChartSkeleton, {}), children: _jsx(ChartLazy, { panelIndex: screens - 1 }) }) }), isActiveList[screens - 1] && _jsxs(_Fragment, { children: [_jsx(ResizableHandle, { className: `data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1 ${screenIndex === screens - 1 ? "border-2 border-blue-700" : "border-transparent border-2"}` }), _jsx(ResizablePanel, { children: _jsx(Suspense, { fallback: _jsx(DashboardSkeleton, {}), children: _jsx(DashboardQuotesSidebarLazy
                                            // selectedCoin={selectedCoin}
                                            , { 
                                                // selectedCoin={selectedCoin}
                                                isActive: isActiveList[screens - 1], panelIndex: screens - 1, screensDataArray: screensDataArray }) }) })] }), _jsx(DashboardSettingsPanel, { onCLick: () => togglePanel(screens - 1), isActive: isActiveList[screens - 1] })] }) }), _jsx(ResizableHandle, { className: "data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1" }), _jsx(ResizablePanel, { children: _jsx(ResizablePanelGroup, { direction: "horizontal", className: "pt-0", children: Array.from({ length: col }).map((_, outerIndex) => {
                            const panelIndex = outerIndex;
                            return (_jsxs(React.Fragment, { children: [_jsx(ResizablePanel, { onMouseEnter: () => toggle(panelIndex, screenId), className: "panel-bottom", children: _jsxs(ResizablePanelGroup, { direction: "horizontal", className: "pt-0 cursor-pointer", onClick: () => dispatch(setActivePanelIndex(panelIndex)), children: [_jsx(ResizablePanel, { id: `outer-bottom-${outerIndex}`, order: outerIndex * 10 + 11, children: _jsx(Suspense, { fallback: _jsx(ChartSkeleton, {}), children: _jsx(ChartLazy, { panelIndex: panelIndex }) }) }, `outer-${outerIndex}`), isActiveList[panelIndex] && _jsxs(_Fragment, { children: [_jsx(ResizableHandle, { className: `data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1 ${screenIndex === panelIndex ? "border-2 border-blue-700" : "border-transparent border-2"}` }), _jsx(ResizablePanel, { id: `outer-dashboard-bottom-${outerIndex}`, order: outerIndex * 10 + 12, children: _jsx(Suspense, { fallback: _jsx(DashboardSkeleton, {}), children: _jsx(DashboardQuotesSidebarLazy
                                                                // selectedCoin={selectedCoin}
                                                                , { 
                                                                    // selectedCoin={selectedCoin}
                                                                    isActive: isActiveList[panelIndex], panelIndex: panelIndex, screensDataArray: screensDataArray }) }) }, `outer-dashboard-${outerIndex}`)] }), _jsx(DashboardSettingsPanel, { onCLick: () => togglePanel(panelIndex), isActive: isActiveList[panelIndex] })] }) }), (col > 1 && outerIndex < col - 1) && (_jsx(ResizableHandle, { className: "data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1" }, `handle-outer-${outerIndex}`))] }, `outer-fragment-bottom-${outerIndex}`));
                        }) }) })] })) : (_jsxs(ResizablePanelGroup, { direction: "vertical", className: "pl-1 pb-1", children: [_jsx(ResizablePanel, { children: _jsx(ResizablePanelGroup, { direction: "horizontal", className: "pt-0", children: Array.from({ length: greed }).map((_, outerIndex) => {
                            const panelIndex = outerIndex;
                            return (_jsxs(React.Fragment, { children: [_jsx(ResizablePanel, { className: "greed-panel-top", onMouseEnter: () => toggle(panelIndex, screenId), children: _jsxs(ResizablePanelGroup, { direction: "horizontal", className: "pt-0", onClick: () => dispatch(setActivePanelIndex(panelIndex)), children: [_jsx(ResizablePanel, { id: `outer-greed-${outerIndex}`, order: outerIndex * 10 + 13, children: _jsx(Suspense, { fallback: _jsx(ChartSkeleton, {}), children: _jsx(ChartLazy, { panelIndex: panelIndex }) }) }, `outer-${outerIndex}`), isActiveList[panelIndex] && _jsxs(_Fragment, { children: [_jsx(ResizableHandle, { className: `data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1 ${screenIndex === panelIndex ? "border-2 border-blue-700" : "border-transparent border-2"}` }), _jsx(ResizablePanel, { id: `outer-dashboard-greed-${outerIndex}`, order: outerIndex * 10 + 14, children: _jsx(Suspense, { fallback: _jsx(DashboardSkeleton, {}), children: _jsx(DashboardQuotesSidebarLazy
                                                                // selectedCoin={selectedCoin}
                                                                , { 
                                                                    // selectedCoin={selectedCoin}
                                                                    isActive: isActiveList[panelIndex], panelIndex: panelIndex, screensDataArray: screensDataArray }) }) }, `outer-dashboard-${outerIndex}`)] }), _jsx(DashboardSettingsPanel, { onCLick: () => togglePanel(panelIndex), isActive: isActiveList[panelIndex] })] }) }), (greed > 1 && outerIndex < greed - 1) && (_jsx(ResizableHandle, { className: "data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1" }, `handle-outer-${outerIndex}`))] }, `outer-fragment-greed-${outerIndex}`));
                        }) }) }), _jsx(ResizableHandle, { className: "data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1" }), _jsx(ResizablePanel, { children: _jsx(ResizablePanelGroup, { direction: "horizontal", className: "pt-0", children: Array.from({ length: greed }).map((_, outerIndex) => {
                            const panelIndex = greed + outerIndex;
                            return (_jsxs(React.Fragment, { children: [_jsx(ResizablePanel, { className: "greed-panel-bottom", onMouseEnter: () => toggle(panelIndex, screenId), children: _jsxs(ResizablePanelGroup, { direction: "horizontal", className: "pt-0", onClick: () => dispatch(setActivePanelIndex(panelIndex)), children: [_jsx(ResizablePanel, { id: `outer-greed2-${outerIndex}`, order: outerIndex * 10 + 15, children: _jsx(Suspense, { fallback: _jsx(ChartSkeleton, {}), children: _jsx(ChartLazy, { panelIndex: panelIndex }) }) }, `outer-${outerIndex}`), isActiveList[panelIndex] && _jsxs(_Fragment, { children: [_jsx(ResizableHandle, { className: `data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1 ${screenIndex === panelIndex ? "border-2 border-blue-700" : "border-transparent border-2"}` }), _jsx(ResizablePanel, { id: `outer-dashboard-greed2-${outerIndex}`, order: outerIndex * 10 + 16, children: _jsx(Suspense, { fallback: _jsx(DashboardSkeleton, {}), children: _jsx(DashboardQuotesSidebarLazy
                                                                // selectedCoin={selectedCoin}
                                                                , { 
                                                                    // selectedCoin={selectedCoin}
                                                                    isActive: isActiveList[panelIndex], panelIndex: panelIndex, screensDataArray: screensDataArray }) }) }, `outer-dashboard-${outerIndex}`)] }), _jsx(DashboardSettingsPanel, { onCLick: () => togglePanel(panelIndex), isActive: isActiveList[panelIndex] })] }) }), (greed > 1 && outerIndex < greed - 1) && (_jsx(ResizableHandle, { className: "data-[panel-group-direction=vertical]:h-1 data-[panel-group-direction=horizontal]:w-1" }, `handle-outer-${outerIndex}`))] }, `outer-fragment-greed2-${outerIndex}`));
                        }) }) })] })) }));
}
export default DashboardPage;
